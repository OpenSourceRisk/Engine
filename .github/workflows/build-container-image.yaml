name: Build container image

on:
  workflow_dispatch:
  push:
    branches:
      - "Containerfile-work"

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      # Make adjustments to the environment
    # - name: Setup Podman - needed for running tests
    #   run: sudo apt update && sudo apt-get -y install podman

    # Get the repository's code
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build the first stage, which we can use as the testing facility
    # - name: Build the "build" stage
    #   uses: redhat-actions/buildah-build@v2
    #   with:
    #     image: orebuild
    #     tags: build
    #     containerfiles: |
    #       ./Docker/Containerfile
    #     platforms: linux/amd64
    #     context: .
    #     layers: true
    #     extra-args: |
    #       --target=orebuild
    - name: Build the "build" stage
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Docker/Dockerfile.aio
        load: true
        platforms: linux/amd64
        tags: ${{ env.TEST_TAG }}
        target: orebuild
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Create test-results folder
      run: mkdir -p test-results

    # Run the tests in the result of the first stage build, saving the results to our filesystem
    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v2
      id: cpu-cores

    - name: Run the tests
      run: >
        /usr/bin/docker run
        --workdir=/ore/build --volume $GITHUB_WORKSPACE/test-results:/ore/test-results
        --env NOSE_PROCESSES=${{ steps.cpu-cores.outputs.count }} --env NOSE_PROCESS_TIMEOUT=600 --env NOSE_WITH_XUNITMP=true --env NOSE_XUNITMP_FILE=/ore/test-results/examples.xml
        localhost/orebuild:build
        ctest -j${{ steps.cpu-cores.outputs.count }} --test-dir . --output-junit /ore/test-results/ctest.xml --timeout 5400

    # Register the xunit results
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          test-results/**/*.xml

    # Build the rest of the stages - the first stage should be cached
    # - name: Build the "release" stage
    #   uses: redhat-actions/buildah-build@v2
    #   with:
    #     image: ore
    #     containerfiles: |
    #       ./Docker/Containerfile
    #     platforms: linux/amd64
    #     context: .
    #     layers: true
    - name: Build the "release" stage
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Docker/Dockerfile.aio
        load: true
        platforms: linux/amd64
        tags: ${{ env.TEST_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max