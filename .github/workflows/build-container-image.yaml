name: Build container image

on:
  workflow_dispatch:
  push:
    branches:
      - "Containerfile-work"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-release:
    strategy:
      matrix:
        dockerfile_postfix: [debian11, centos-stream9, fedora40]
        platform: [linux/amd64]
    runs-on: ubuntu-24.04
    steps:
    
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # TODO sort out registry caching to make this faster
      #Â https://blacksmith.sh/blog/cache-is-king-a-guide-for-docker-layer-caching-in-github-actions

      # Build the first stage, which we can use as the testing facility    
      # - name: Extract metadata (tags, labels) for the builder stage
      #   id: builder-meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-builder
      #     flavor: |
      #       latest=auto
      #       prefix=${{ matrix.dockerfile_postfix }}-,onlatest=true
      #     tags: |
      #       type=sha,prefix=${{ matrix.dockerfile_postfix }}-sha-
      #       type=ref,event=branch
      #       type=ref,event=tag

      - name: Build the "build" stage
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          file: ./Docker/Dockerfile.aio.${{ matrix.dockerfile_postfix }}
          platforms: ${{ matrix.platform }}
          tags: ore-builder
          target: builder
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-builder:${{ matrix.dockerfile_postfix }}-${{ env.GITHUB_REF_NAME }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-builder:${{ matrix.dockerfile_postfix }}-${{ github.event.repository.default_branch }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-builder:${{ matrix.dockerfile_postfix }}-${{ env.GITHUB_REF_NAME }},mode=max

      # Run the tests in the result of the first stage build, saving the results to our filesystem
      - name: Create test-results folder
        run: mkdir -p test-results
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: Run the tests
        run: >
          /usr/bin/docker run
          --workdir=/ore/build --volume $GITHUB_WORKSPACE/test-results:/ore/test-results
          --env NOSE_PROCESSES=${{ steps.cpu-cores.outputs.count }} --env NOSE_PROCESS_TIMEOUT=600 --env NOSE_WITH_XUNITMP=true --env NOSE_XUNITMP_FILE=/ore/test-results/examples.xml
          ore-builder
          ctest -j${{ steps.cpu-cores.outputs.count }} --test-dir . --output-junit /ore/test-results/ctest.xml --timeout 5400

      # Register the xunit results
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        # only if the tests ran - there are other results for skipped, etc.
        if: success() || failure()
        with:
          files: |
            test-results/**/*.xml

      # Build the rest of the stages - the first stage should be cached
      - name: Extract metadata (tags, labels) for Docker release
        id: release-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            prefix=${{ matrix.dockerfile_postfix }}-,onlatest=true
          tags: |
            type=sha,prefix=${{ matrix.dockerfile_postfix }}-sha-
            type=ref,event=branch
            type=ref,event=tag

      - name: Build the "release" stage
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Docker/Dockerfile.aio.${{ matrix.dockerfile_postfix }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.release-meta.outputs.tags }}
          labels: ${{ steps.release-meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.dockerfile_postfix }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.dockerfile_postfix }},mode=max