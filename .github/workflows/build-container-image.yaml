name: Build container image

on:
  workflow_dispatch:
  push:
    branches: [master]
    tags:
        - 'v*'
  release:
    types: [published]
  pull_request:
    branches: [master]
    types: [ready_for_review, opened, synchronize, reopened]
    paths:
      - .github/workflows/linux_build.yaml
      - ./App/**
      - ./OREAnalytics/**
      - '!./OREAnalytics/doc/**'
      - ./OREData/**
      - '!./OREData/doc/**'
      - ./ORETest/**
      - ./QuantExt/**
      - '!./QuantExt/doc/**'
      - CMakeLists.txt

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-release:
    strategy:
      matrix:
        flavour: [debian11, centos_stream9]
        platform: [linux/amd64]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # This looks overworked but it gives us limited flexibility to add new flavours without having to overduplicate Dockerfiles
      - name: Config
        id: config
        uses: cloudposse/github-action-yaml-config-query@main      
        with:
          query: .${{ matrix.flavour }}
          config: |-
            debian11:
              dockerfile_suffix: debian11
              tag_prefix: debian11
            centos_stream9:
              dockerfile_suffix: centos-stream9
              tag_prefix: centos-stream9
          # Fully-defined example
          # centos_stream9:
          #   dockerfile_suffix: centos-stream9
          #   tag_prefix: centos-stream9  
          # build_args: |
          #   builder_base_image=quay.io/centos/centos:stream9
          #   release_base_image=quay.io/centos/centos:stream9-minimal
          #   code_ready_builder_repo=crb

      # use registry caching to make this faster
      #Â https://blacksmith.sh/blog/cache-is-king-a-guide-for-docker-layer-caching-in-github-actions

      # Build the first stage, which we can use as the testing facility    
      - name: Extract metadata (tags, labels) for the builder
        id: builder-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-builder
          flavor: |
            latest=false
            prefix=${{ steps.config.outputs.tag_prefix }}-,onlatest=true
          tags: |
            type=sha,prefix=${{ steps.config.outputs.tag_prefix }}-sha-
            type=ref,event=branch
            type=ref,event=tag
      - name: Map builder tags to cache specs
        uses: actions/github-script@v7
        id: builder-tag-cache-mapper
        env:
          TAGS: ${{ steps.builder-meta.outputs.tags }}
        with:
          script: |
            return {
              cache_from: process.env.TAGS.split("\n").map(t=>'type=registry,ref='+ t).join("\n"),
              cache_to: process.env.TAGS.split("\n").map(t=>'type=registry,ref='+ t + ',mode=max').join("\n")
            }

      - name: Build the "builder" container
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          file: ./Docker/Dockerfile.aio.${{ steps.config.outputs.dockerfile_suffix }}
          build-args: ${{ steps.config.outputs.build_args }}
          platforms: ${{ matrix.platform }}
          tags: ore-builder
          target: builder
          cache-from: ${{ fromJSON(steps.builder-tag-cache-mapper.outputs.result).cache_from }}
          cache-to: ${{ (github.event_name != 'pull_request') && fromJSON(steps.builder-tag-cache-mapper.outputs.result).cache_to }}

      # Run the tests inside the container we just build, saving the results to our workspace
      - name: Create test-results folder
        run: mkdir -p test-results
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      - name: Run the tests
        run: >
          /usr/bin/docker run
          --workdir=/ore/build --volume $GITHUB_WORKSPACE/test-results:/ore/test-results
          --env NOSE_PROCESSES=${{ steps.cpu-cores.outputs.count }} --env NOSE_PROCESS_TIMEOUT=600 --env NOSE_WITH_XUNITMP=true --env NOSE_XUNITMP_FILE=/ore/test-results/examples.xml
          ore-builder
          ctest -j${{ steps.cpu-cores.outputs.count }} --test-dir . --output-junit /ore/test-results/ctest.xml --timeout 5400

      # Register the xunit results
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        # only if the tests ran - there are other results for skipped, etc.
        if: success() || failure()
        with:
          files: |
            test-results/**/*.xml

      # Build the rest of the stages - the first stage should be cached
      - name: Extract metadata (tags, labels) for Docker release
        id: release-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            prefix=${{ steps.config.outputs.tag_prefix }}-,onlatest=true
          tags: |
            type=sha,prefix=${{ steps.config.outputs.tag_prefix }}-sha-
            type=ref,event=branch
            type=ref,event=tag
      - name: Map release tags to cache specs
        uses: actions/github-script@v7
        id: release-tag-cache-mapper
        env:
          TAGS: ${{ steps.builder-meta.outputs.tags }}
        with:
          script: |
            return {
              cache_from: process.env.TAGS.split("\n").map(t=>'type=registry,ref='+ t).join("\n"),
              cache_to: process.env.TAGS.split("\n").map(t=>'type=registry,ref='+ t + ',mode=max').join("\n")
            }
            
      - name: Build the "release" container
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Docker/Dockerfile.aio.${{ steps.config.outputs.dockerfile_suffix }}
          build-args: ${{ steps.config.outputs.build_args }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.release-meta.outputs.tags }}
          labels: ${{ steps.release-meta.outputs.labels }}
          cache-from: ${{ fromJSON(steps.release-tag-cache-mapper.outputs.result).cache_from }}
          cache-to: ${{ (github.event_name != 'pull_request') && fromJSON(steps.release-tag-cache-mapper.outputs.result).cache_to }}